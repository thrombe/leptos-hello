
# .github/workflows/deploy.yml

name: Deploy Rust Binary

# Trigger the workflow on pushes to the main branch
on:
  push:
    branches:
      - master

env:
  # The name of your Rust binary
  BINARY_NAME: test1
  # The target architecture for your server (most Linux servers are x86_64)
  # For ARM servers (like Raspberry Pi or AWS Graviton), use aarch64-unknown-linux-gnu
  RUST_TARGET: x86_64-unknown-linux-gnu
  SSH_HOST: 46.62.206.149
  SSH_USER: root
  FRONTEND_DIR: dist

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          # ## ADDED ##: Ensure wasm target is available for Trunk
          targets: wasm32-unknown-unknown

      - name: Add Rust target for cross-compilation
        run: rustup target add ${{ env.RUST_TARGET }}

      # Use a cache to speed up subsequent builds
      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ env.RUST_TARGET }}

      # - name: Build release binary
      #   run: cargo build --release --target ${{ env.RUST_TARGET }}

      - name: Build frontend with Trunk
        run: trunk build --release
        working-directory: ${{ env.FRONTEND_DIR }} # Runs the command inside the frontend directory


      # This step copies the built binary from the GitHub runner to your server
      # - name: Deploy with SCP
      #   uses: appleboy/scp-action@master
      #   with:
      #     host: ${{ env.SSH_HOST }}
      #     username: ${{ env.SSH_USER }}
      #     key: ${{ secrets.SSH_PRIVATE_KEY }}
      #     source: "target/${{ env.RUST_TARGET }}/release/${{ env.BINARY_NAME }}"
      #     target: "/home/${{ env.SSH_USER }}/app/"
      #     strip_components: 3 # Removes the 'target/.../release' part of the path

      - name: Deploy Frontend Assets with SCP
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "${{ env.FRONTEND_DIR }}/dist/*"
          target: "/home/${{ env.SSH_USER }}/app/"

      # This step connects to your server and runs the restart command
      - name: Restart service on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo systemctl restart ${{ env.BINARY_NAME }}.service
            echo "Service restarted successfully!"
